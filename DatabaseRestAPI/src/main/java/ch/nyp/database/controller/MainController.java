package ch.nyp.database.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import ch.nyp.database.dto.BookDto;
import ch.nyp.database.dto.UserDto;
import ch.nyp.database.dtoconverter.BookDtoConverter;
import ch.nyp.database.dtoconverter.UserDtoConverter;
import ch.nyp.database.model.Book;
import ch.nyp.database.model.User;
import ch.nyp.database.repository.BookRepository;
import ch.nyp.database.repository.UserRepository;

/**
 * Links:
 * http://modelmapper.org/getting-started/
 * 
 * @author holzer
 *
 */
@Controller    // This means that this class is a Controller
@RequestMapping(path="/databaseDemo") // This means URL's start with /demo (after Application path)
public class MainController {
	
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
	private BookRepository bookRepository;
	
	@Autowired
	private UserDtoConverter userDtoConverter;
	
	@Autowired
	private BookDtoConverter bookDtoConverter;

	@PostMapping(path="user/add") 
	public @ResponseBody String addNewUser(@RequestBody UserDto userDto) {
		User dbUser = userDtoConverter.convertToEntity(userDto);
		userRepository.save(dbUser);
		return "User saved";
	}

	@GetMapping(path="user/all")
	public @ResponseBody List<UserDto> getAllUsers() {
		// This returns a JSON or XML with the users
		List<User> usersFromDB = userRepository.findAll();
		
		List<UserDto> users = usersFromDB.stream()
		          .map(user -> userDtoConverter.convertToDto(user))
		          .collect(Collectors.toList());
		
		return users;
	}
	
	@PostMapping(path="book/add") 
	public @ResponseBody String addNewBook(@RequestBody BookDto book) {
		
		Book dbBook = bookDtoConverter.convertToEntity(book);
		bookRepository.save(dbBook);
		return "Book saved";
	}
	
	@GetMapping(path="book/all")
	public @ResponseBody Iterable<BookDto> getAllBooks() {
		List<Book> booksFromDB = bookRepository.findAll();
		
		List<BookDto> books = booksFromDB.stream()
		          .map(book -> bookDtoConverter.convertToDto(book))
		          .collect(Collectors.toList());
		
		return books;
	}
}
